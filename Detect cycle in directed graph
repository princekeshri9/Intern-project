#include<bits/stdc++.h>
using namespace std;

    //..............Using DFS detect cycle in directed graph........................//

bool iscycle(vector<int> adj[],vector<bool>& vis,int n,vector<bool>& stack){
      vis[n]=true;
      stack[n]=true;
      for(auto it=adj[n].begin();it!=adj[n].end();it++){
            if(!vis[*it]){
                  if(iscycle(adj,vis,*it,stack))return true;
            }
            else if(stack[*it])return true;
      }
      stack[n]=false;
      return false;
}
int main(){
      int node,edges;
      cin>>node>>edges;
      
      vector<int> adj[node+1]; // node is from 1 to node
      
      for(int i=0;i<edges;i++){
            int u,v;
            cin>>u>>v;   // edges between u and v
            adj[u].push_back(v);
      }
      
      // Make visited vector which mark true after the node is visited
      vector<bool> vis(node+1,false); 
      
      vector<bool> stack(node+1,false);
      
      for(int i=1;i<=node;i++){
            if(!vis[i]){
                  if(iscycle(adj,vis,i,stack)){
                        cout<<"Cycle is present"<<endl;
                        return 0;
                  }
            }
      }
      
      cout<<"Cycle is not present"<<endl;
      
      return 0;
}
